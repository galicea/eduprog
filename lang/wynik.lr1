(* produkcje:
1 :  <Z> ::= <W>
2 :  <W> ::= <W> ADDSYM <A>
3 :  <W> ::= <W> SUBSYM <A>
4 :  <W> ::= <A>
5 :  <A> ::= <A> MULSYM <A>
6 :  <A> ::= <A> DIVSYM <A>
7 :  <A> ::= <B>
8 :  <B> ::= ADDSYM <C>
9 :  <B> ::= SUBSYM <C>
10 :  <B> ::= <C>
11 :  <C> ::= LPAREN <W> RPAREN
12 :  <C> ::= NUMSYM
STANY : 
1 :  <W>
2 :  <W>ADDSYM
3 :  <W>ADDSYM<A>
4 :  <W>SUBSYM
5 :  <W>SUBSYM<A>
6 :  <A>
7 :  <A>MULSYM
8 :  <A>MULSYM<A>
9 :  <A>DIVSYM
10 :  <A>DIVSYM<A>
11 :  <B>
12 :  ADDSYM
13 :  ADDSYM<C>
14 :  SUBSYM
15 :  SUBSYM<C>
16 :  <C>
17 :  LPAREN
18 :  LPAREN<W>
19 :  LPAREN<W>RPAREN
20 :  NUMSYM
*)

function PoRedukcji(produkcja : word) : word;
var
 st : byte;
begin
 st := AktualnyStan;
 case produkcja of
   2, 3, 4 : case st of
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20 : PoRedukcji := 1;
      17 : PoRedukcji := 18;
     end;
   5, 6, 7 : case st of
      0, 1, 3, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 : PoRedukcji := 6;
      2 : PoRedukcji := 3;
      4 : PoRedukcji := 5;
      7 : PoRedukcji := 8;
      9 : PoRedukcji := 10;
     end;
   8, 9, 10 : case st of
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 : PoRedukcji := 11;
     end;
   11, 12 : case st of
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20 : PoRedukcji := 16;
      12 : PoRedukcji := 13;
      14 : PoRedukcji := 15;
     end;
 end; {case produkcja} 
end; { PoRedukcji }


procedure redukcja(produkcja : word);

 var
   TK1 : token;
begin
  case produkcja of
   { zdj‘cie ze stosu element¢w prawej strony produkcji, 
     wygenerowanie kodu, lub wykonanie oblicze¤ }
   1: begin  { <Z> ::= <W> }
       pop(TK1);
       end;
   2: begin  { <W> ::= <W> ADDSYM <A> }
       pop(TK1);
       pop(TK1);
       pop(TK1);
       end;
   3: begin  { <W> ::= <W> SUBSYM <A> }
       pop(TK1);
       pop(TK1);
       pop(TK1);
       end;
   4: begin  { <W> ::= <A> }
       pop(TK1);
       end;
   5: begin  { <A> ::= <A> MULSYM <A> }
       pop(TK1);
       pop(TK1);
       pop(TK1);
       end;
   6: begin  { <A> ::= <A> DIVSYM <A> }
       pop(TK1);
       pop(TK1);
       pop(TK1);
       end;
   7: begin  { <A> ::= <B> }
       pop(TK1);
       end;
   8: begin  { <B> ::= ADDSYM <C> }
       pop(TK1);
       pop(TK1);
       end;
   9: begin  { <B> ::= SUBSYM <C> }
       pop(TK1);
       pop(TK1);
       end;
   10: begin  { <B> ::= <C> }
       pop(TK1);
       end;
   11: begin  { <C> ::= LPAREN <W> RPAREN }
       pop(TK1);
       pop(TK1);
       pop(TK1);
       end;
   12: begin  { <C> ::= NUMSYM }
       pop(TK1);
       end;
  end; { case }
  NowyStan(PoRedukcji(produkcja));
end; { Redukcja }

procedure parser;
var
  st : word;
begin
 NextToken(sin,TK,x,ParseError);
 t:=TK.symb;
 repeat
   st:=AktualnyStan;
   if (st=1) and (t=EOINSYM) then
       koniec:=TRUE else
   case st of
    0, 2, 4, 7, 9, 17 : case t of
     ADDSYM :  przesuniecie(12);
     SUBSYM :  przesuniecie(14);
     LPAREN :  przesuniecie(17);
     NUMSYM :  przesuniecie(20);
     else blad := TRUE
    end;
    1 : case t of
     ADDSYM :  przesuniecie(2);
     SUBSYM :  przesuniecie(4);
     else blad := TRUE
    end;
    3 : case t of
     EOINSYM :  redukcja(2);
     ADDSYM :  redukcja(2);
     SUBSYM :  redukcja(2);
     MULSYM :  przesuniecie(7);
     DIVSYM :  przesuniecie(9);
     LPAREN :  redukcja(2);
     RPAREN :  redukcja(2);
     NUMSYM :  redukcja(2);
     else blad := TRUE
    end;
    5 : case t of
     EOINSYM :  redukcja(3);
     ADDSYM :  redukcja(3);
     SUBSYM :  redukcja(3);
     MULSYM :  przesuniecie(7);
     DIVSYM :  przesuniecie(9);
     LPAREN :  redukcja(3);
     RPAREN :  redukcja(3);
     NUMSYM :  redukcja(3);
     else blad := TRUE
    end;
    6 : case t of
     EOINSYM :  redukcja(4);
     ADDSYM :  redukcja(4);
     SUBSYM :  redukcja(4);
     MULSYM :  przesuniecie(7);
     DIVSYM :  przesuniecie(9);
     LPAREN :  redukcja(4);
     RPAREN :  redukcja(4);
     NUMSYM :  redukcja(4);
     else blad := TRUE
    end;
    8 : case t of
     EOINSYM :  redukcja(5);
     ADDSYM :  redukcja(5);
     SUBSYM :  redukcja(5);
     MULSYM :  przesuniecie(7);
     DIVSYM :  przesuniecie(9);
     LPAREN :  redukcja(5);
     RPAREN :  redukcja(5);
     NUMSYM :  redukcja(5);
     else blad := TRUE
    end;
    10 : case t of
     EOINSYM :  redukcja(6);
     ADDSYM :  redukcja(6);
     SUBSYM :  redukcja(6);
     MULSYM :  przesuniecie(7);
     DIVSYM :  przesuniecie(9);
     LPAREN :  redukcja(6);
     RPAREN :  redukcja(6);
     NUMSYM :  redukcja(6);
     else blad := TRUE
    end;
    11 : redukcja(7);
    12, 14 : case t of
     LPAREN :  przesuniecie(17);
     NUMSYM :  przesuniecie(20);
     else blad := TRUE
    end;
    13 : redukcja(8);
    15 : redukcja(9);
    16 : redukcja(10);
    18 : case t of
     ADDSYM :  przesuniecie(2);
     SUBSYM :  przesuniecie(4);
     RPAREN :  przesuniecie(19);
     else blad := TRUE
    end;
    19 : redukcja(11);
    20 : redukcja(12);
   else blad := TRUE
  end; { case }
 until koniec or blad;
end; { parser }
